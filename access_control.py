#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Telegram –±–æ—Ç–∞
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""

import json
import logging
from functools import wraps

logger = logging.getLogger(__name__)

USERS_FILE = "users.json"

# ============================================================================
# –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
# ============================================================================

def load_users():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—É—Å—Ç—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏
        default_users = {"admins": [], "users": []}
        save_users(default_users)
        return default_users
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json: {e}")
        return {"admins": [], "users": []}

def save_users(users_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(users_data, f, ensure_ascii=False, indent=2)
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json: {e}")

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    users = load_users()
    return user_id in users.get("admins", [])

def is_user(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"""
    users = load_users()
    return user_id in users.get("users", [])

def has_access(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (–∞–¥–º–∏–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)"""
    return is_admin(user_id) or is_user(user_id)

def add_user(user_id, role="user"):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users = load_users()
    
    if role == "admin":
        if user_id not in users["admins"]:
            users["admins"].append(user_id)
            save_users(users)
            return True
    else:
        if user_id not in users["users"]:
            users["users"].append(user_id)
            save_users(users)
            return True
    
    return False

def remove_user(user_id):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∞–¥–º–∏–Ω–∞!)"""
    users = load_users()
    
    if user_id in users["users"]:
        users["users"].remove(user_id)
        save_users(users)
        return True
    
    return False

def get_all_users():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return load_users()

# ============================================================================
# –î–ï–ö–û–†–ê–¢–û–†–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê
# ============================================================================

def require_access(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä: —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø (–∞–¥–º–∏–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)"""
    @wraps(func)
    async def wrapper(update, context):
        user_id = update.effective_user.id
        
        if not has_access(user_id):
            await update.effective_message.reply_text(
                "üîí <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            return
        
        return await func(update, context)
    
    return wrapper

def require_admin(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    @wraps(func)
    async def wrapper(update, context):
        user_id = update.effective_user.id
        
        if not is_admin(user_id):
            await update.effective_message.reply_text(
                "üîí <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                parse_mode="HTML"
            )
            return
        
        return await func(update, context)
    
    return wrapper

