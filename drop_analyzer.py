#!/usr/bin/env python3
"""
ML –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥—Ä–æ–ø–∞ –∏–∑ –ø–æ–¥–∞—Ä–∫–æ–≤
–ü—Ä–æ—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
"""

import json
import numpy as np
from collections import defaultdict
from datetime import datetime

class DropAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥—Ä–æ–ø–∞ —Å –ø–æ–º–æ—â—å—é ML"""
    
    def __init__(self, stats_file="drop_statistics.json"):
        self.stats_file = stats_file
        self.data = self.load_statistics()
    
    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            with open(self.stats_file, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return {"sessions": []}
    
    def get_total_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not self.data.get("sessions"):
            return None
        
        total_gifts = 0
        total_items = defaultdict(int)
        
        for session in self.data["sessions"]:
            total_gifts += session["total_opened"]
            for item, count in session["loot"].items():
                total_items[item] += count
        
        return {
            "total_gifts": total_gifts,
            "total_items": dict(total_items),
            "sessions_count": len(self.data["sessions"])
        }
    
    def get_last_session_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏"""
        if not self.data.get("sessions"):
            return None
        
        last_session = self.data["sessions"][-1]
        
        return {
            "total_gifts": last_session["total_opened"],
            "total_items": dict(last_session["loot"]),
            "sessions_count": 1,
            "timestamp": last_session.get("timestamp", "")
        }
    
    def calculate_probabilities(self, stats=None):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥—Ä–æ–ø–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        if stats is None:
            stats = self.get_total_stats()
        
        if not stats:
            return None
        
        total_gifts = stats["total_gifts"]
        probabilities = {}
        
        for item, count in stats["total_items"].items():
            probabilities[item] = {
                "count": count,
                "probability": (count / total_gifts) * 100,
                "per_gift": count / total_gifts,
                "rarity": self._calculate_rarity(count, total_gifts)
            }
        
        return probabilities
    
    def _calculate_rarity(self, count, total_gifts):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        probability = (count / total_gifts) * 100
        
        if probability >= 50:
            return "legendary"  # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π (–≤—ã–ø–∞–¥–∞–µ—Ç –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞)
        elif probability >= 20:
            return "epic"  # –≠–ø–∏—á–µ—Å–∫–∏–π (—á–∞—Å—Ç–æ)
        elif probability >= 10:
            return "rare"  # –†–µ–¥–∫–∏–π (—Å—Ä–µ–¥–Ω–µ)
        elif probability >= 5:
            return "uncommon"  # –ù–µ–æ–±—ã—á–Ω—ã–π
        else:
            return "common"  # –û–±—ã—á–Ω—ã–π (—Ä–µ–¥–∫–æ)
    
    def predict_next_opening(self, n_gifts=100, stats=None):
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥—Ä–æ–ø–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ N –ø–æ–¥–∞—Ä–∫–æ–≤
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–π–µ—Å–æ–≤—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥
        """
        probs = self.calculate_probabilities(stats)
        if not probs:
            return None
        
        predictions = {}
        for item, data in probs.items():
            expected_count = data['per_gift'] * n_gifts
            
            # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            std_dev = np.sqrt(n_gifts * data['per_gift'] * (1 - data['per_gift']))
            confidence_low = max(0, expected_count - 1.96 * std_dev)
            confidence_high = expected_count + 1.96 * std_dev
            
            predictions[item] = {
                "expected": round(expected_count, 2),
                "min_95": round(confidence_low, 2),
                "max_95": round(confidence_high, 2),
                "probability": data['probability']
            }
        
        return predictions
    
    def find_best_drops(self, item_types=None):
        """–ù–∞–π—Ç–∏ –ª—É—á—à–∏–µ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        probs = self.calculate_probabilities()
        if not probs:
            return None
        
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Ç–∏–ø—ã, –±–µ—Ä–µ–º —Å–∞–º—ã–µ —Ä–µ–¥–∫–∏–µ
        if not item_types:
            sorted_by_rarity = sorted(
                probs.items(),
                key=lambda x: x[1]['probability']
            )
            item_types = [item[0] for item in sorted_by_rarity[:5]]
        
        recommendations = {}
        for item in item_types:
            if item in probs:
                data = probs[item]
                recommendations[item] = {
                    "probability": data['probability'],
                    "expected_gifts_needed": int(1 / data['per_gift']) if data['per_gift'] > 0 else 999,
                    "rarity": data['rarity']
                }
        
        return recommendations
    
    def compare_sessions(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Å–µ—Å—Å–∏–π –æ—Ç–∫—Ä—ã—Ç–∏—è"""
        if len(self.data["sessions"]) < 2:
            return None
        
        comparison = []
        for session in self.data["sessions"][-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ—Å—Å–∏–π
            total_items = sum(session["loot"].values())
            unique_items = len(session["loot"])
            
            comparison.append({
                "timestamp": session["timestamp"],
                "opened": session["total_opened"],
                "total_items": total_items,
                "unique_items": unique_items,
                "avg_items_per_gift": total_items / session["total_opened"] if session["total_opened"] > 0 else 0
            })
        
        return comparison
    
    def get_drop_trends(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –¥—Ä–æ–ø–∞ (—É–ª—É—á—à–∞–µ—Ç—Å—è –∏–ª–∏ —É—Ö—É–¥—à–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º)"""
        if len(self.data["sessions"]) < 3:
            return None
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        item_trends = defaultdict(list)
        
        for session in self.data["sessions"]:
            total_gifts = session["total_opened"]
            for item, count in session["loot"].items():
                prob = (count / total_gifts) * 100 if total_gifts > 0 else 0
                item_trends[item].append(prob)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã
        trends = {}
        for item, probs in item_trends.items():
            if len(probs) >= 3:
                # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è (–Ω–∞–∫–ª–æ–Ω)
                x = np.arange(len(probs))
                slope = np.polyfit(x, probs, 1)[0]
                
                if slope > 0.5:
                    trend = "—Ä–∞—Å—Ç–µ—Ç"
                elif slope < -0.5:
                    trend = "–ø–∞–¥–∞–µ—Ç"
                else:
                    trend = "—Å—Ç–∞–±–∏–ª—å–Ω–æ"
                
                trends[item] = {
                    "trend": trend,
                    "slope": round(slope, 2),
                    "recent_prob": round(probs[-1], 2),
                    "avg_prob": round(np.mean(probs), 2)
                }
        
        return trends

# ============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
# ============================================================================

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    analyzer = DropAnalyzer()
    
    print("=" * 60)
    print("ML –ê–ù–ê–õ–ò–ó –î–†–û–ü–ê")
    print("=" * 60)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = analyzer.get_total_stats()
    if stats:
        print(f"\nüìä –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {stats['total_gifts']}")
        print(f"üìà –°–µ—Å—Å–∏–π: {stats['sessions_count']}\n")
    
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    probs = analyzer.calculate_probabilities()
    if probs:
        print("\nüé≤ –¢–û–ü-10 –ü–†–ï–î–ú–ï–¢–û–í –ü–û –í–ï–†–û–Ø–¢–ù–û–°–¢–ò:\n")
        sorted_probs = sorted(probs.items(), key=lambda x: x[1]['probability'], reverse=True)
        
        for item, data in sorted_probs[:10]:
            print(f"  {item}: {data['probability']:.2f}% (–≤—ã–ø–∞–ª–æ {data['count']} —Ä–∞–∑)")
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    predictions = analyzer.predict_next_opening(100)
    if predictions:
        print("\nüîÆ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –ù–ê 100 –ü–û–î–ê–†–ö–û–í:\n")
        sorted_pred = sorted(predictions.items(), key=lambda x: x[1]['expected'], reverse=True)
        
        for item, data in sorted_pred[:5]:
            print(f"  {item}: –æ–∂–∏–¥–∞–µ—Ç—Å—è {data['expected']:.1f} (95% CI: {data['min_95']:.1f}-{data['max_95']:.1f})")
    
    # –¢—Ä–µ–Ω–¥—ã
    trends = analyzer.get_drop_trends()
    if trends:
        print("\nüìà –¢–†–ï–ù–î–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏):\n")
        for item, data in list(trends.items())[:5]:
            emoji = "üìà" if data['trend'] == "—Ä–∞—Å—Ç–µ—Ç" else "üìâ" if data['trend'] == "–ø–∞–¥–∞–µ—Ç" else "‚û°Ô∏è"
            print(f"  {emoji} {item}: {data['trend']} ({data['recent_prob']:.1f}%)")

